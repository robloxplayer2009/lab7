#include <iostream>
#include <chrono>
using namespace std;
void heapify(long long * arr, int n, int i)
{
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;
    if (l < n && arr[l] > arr[largest])
        largest = l;
    if (r < n && arr[r] > arr[largest])
        largest = r;
    if (largest != i)
    {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}
int main()
{
    /*long long n = 4;
    vector <long long > arr(n);
    */
    int t = 100;
    while (t--)
    {
        srand(time(0));
        int n = 1000000;
        long long int* arr = new long long int[n];
        for (int i = 0; i < n; i++)
            arr[i] = rand();
        auto start = chrono::steady_clock::now();

        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);
        for (int i = n - 1; i >= 0; i--)
        {
            swap(arr[0], arr[i]);
            heapify(arr, i, 0);
        }
        auto end = chrono::steady_clock::now();
        auto elapsed_ms = chrono::duration_cast<chrono::milliseconds>(end - start);
        /*
        for (int i = 0; i < n; ++i)
            cout << arr[i] << endl;*/
        cout << elapsed_ms.count() << " ms\n";
    }
}